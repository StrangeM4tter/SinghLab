#Do lab computers have python? If not, consider py2exe for easy transportable packages.

#-----------------------imports------------------------------#

from pymeasure.instruments.keithley import Keithley2400
from pymeasure.adapters import VISAAdapter
import pyvisa
from pymeasure.experiment import Procedure
from pymeasure.experiment import IntegerParameter
from pymeasure.experiment import Worker
import numpy as np
import pandas as pd
from time import sleep
import matplotlib.pyplot as plt

#-----------------------user block------------------------------#

address = 19     #check with resource manager if not sure, or just restart KS to see it on startup
SM = Keithley2400("GPIB::"+str(address)+"::INSTR")
rm = pyvisa.ResourceManager()

#-----------------------main------------------------------#
def scpicommhelp(function):   #can be expanded to other functions
    if function == "Ohm":
        gab = {":SENS:FUNC 'RES'" : "Select Resistance function",
        ":SENS:RES:RANG <n>": "Select Ohms range, n is range", 
        ":SENS:RES:MOD <name>" : "Select ohms mode, name is MANual or AUTO", 
        ":SENS:RES:OCOM <state>" : "Enable/disable ohms offset compensation, state is ON or OFF",
        ":SENS:VOLT:PROT <n>" : "Set voltage compliance n for manual ohms",
        ":SENS:CURR:PROT <n>" : "Set current compliance n for manual ohms",
        ":SOUR:FUNC <name>" : "Select source function, name is CURRent or VOLTage",
        ":SYST:RSEN <state>" : "2-wire/4-wire sensing, state is ON for 4 or OFF for 2",
        ":OUTP <state>" : "Turn output on or off, state is ON or OFF",
        ":READ?" : "Trigger and acquire reading"}
        return gab
    else:
        pass
    
#Ground Resistance Calibration
path=#yourpathhere
def simpleres(trueres, shutdown=True):
    trueres=trueres
    delay=.005
    SM.apply_current()
    set_current=1e-6
    SM.source_current=set_current
    SM.source_current_range=10e-6
    SM.compliance_voltage=1
    SM.enable_source()
    SM.config_buffer(points=20, delay=delay)
    SM.start_buffer()
    SM.measure_resistance(nplc=1)
    #print(SM.resistance)   
    if shutdown == True:
        SM.shutdown()
    else:
        pass
    
    
    res=SM.buffer_data
    lres=len(res)
    sta=np.std(res)
    rmean=np.mean(res)
    print("Standard deviation: ", sta)
    print("Average: ", rmean)
    percerror = ((trueres-rmean)/trueres)*100
    print("Percent Error: ", percerror)
    current=[]
    track=[]                  #initializing arrays
    yer=[]
    a=0
    while a<lres:
        current.append(set_current)
        track.append(delay*a)
        yer.append(res[a]*.05)
        a+=1
    
    yer=res*.005
    
    plot_title=str(trueres)+"Ohm, 1e-6 A, Odd and wire ground"
    plt.plot(track, res)
    plt.xlabel("Time (s)")
    plt.ylabel("Resistance (Ohm)")
    plt.title(plot_title)
    plt.ylim(21200,21500)
    plt.errorbar(track, res, xerr=None, yerr=yer)
    plt.show()    
    filename=plot_title+'.csv'
    with open(filename, 'w', newline='') as csvfile:
        resdata = csv.writer(csvfile, delimiter=',')
        resdata.writerow(["Resistance", res, "Time", track, "Standard Deviation", sta, "Average", rmean, "Percent Error", percerror])
        csvfile.close()
   

###########WIP###############################  
class SimpleProcedure(Procedure):


    #loop iteration parameter
    iterations = IntegerParameter('Loop Iterations')

    #list defining order and appearance of columns in our data file
    DATA_COLUMNS = ['Iteration']

    def execute(self):
        """ Loops over each iteration and emits the current iteration,
        before waiting for 0.01 sec, and then checking if the procedure
        should stop
        """
        for i in range(self.iterations):
            self.emit('results', {'Iteration': i})
            sleep(0.01)
            if self.should_stop():
                break
                
#Consider generalizing for all adapter settings


##test bloc###

